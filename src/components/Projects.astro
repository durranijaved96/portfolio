---
import Section from "./Section.astro";
import type { ProjectProps } from "@types";

interface Props {
  projects: ProjectProps[];
  class?: string;
  dense?: boolean;
}
const { projects = [], class: className = "", dense = false } = Astro.props as Props;

// keep your MAX_TECH / MAX_IMPACT etc.
const MAX_TECH = 4;
const MAX_IMPACT = 3;
---

<Section text="Projects" href="projects" class={className} dense={dense}>
  <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-5 md:gap-6">
    {projects.map((p) => {
      const extraTech = (p.tech?.length ?? 0) - MAX_TECH;
      const extraImpact = (p.impact?.length ?? 0) - MAX_IMPACT;
      return (
        <article
          class="group h-full flex flex-col rounded-2xl border border-black/10 dark:border-white/10
                 bg-white/70 dark:bg-white/[0.03] backdrop-blur-md
                 p-4 shadow-sm hover:shadow-lg transition"
        >
          <a
            href={p.linkPreview || p.linkSource || "#"}
            target="_blank"
            rel="noopener noreferrer"
            class="block relative mb-3 aspect-video overflow-hidden rounded-xl ring-1 ring-black/10 dark:ring-white/10"
          >
            <img
              src={p.image}
              alt={p.name}
              class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-[1.03]"
              loading="lazy"
            />
            <span class="absolute inset-0 bg-black/0 group-hover:bg-black/10 dark:group-hover:bg-white/10 transition" />
          </a>

          <div class="flex-1 min-h-0">
            <h3 class="font-semibold">{p.name}</h3>
            <p class="mt-1 line-clamp-2 text-sm text-slate-600 dark:text-slate-300">
              {p.summary}
            </p>

            {p.tech && p.tech.length > 0 && (
              <ul class="mt-2 flex flex-wrap gap-1.5">
                {p.tech.slice(0, MAX_TECH).map((t) => (
                  <li class="text-[11px] px-2 py-0.5 rounded-md bg-black/5 dark:bg-white/10">{t}</li>
                ))}
                {extraTech > 0 && (
                  <li class="text-[11px] px-2 py-0.5 rounded-md bg-black/5/60 dark:bg-white/10/60">
                    +{extraTech}
                  </li>
                )}
              </ul>
            )}

            {p.impact && p.impact.length > 0 && (
              <ul class="mt-2 space-y-1 text-[12px] text-slate-600 dark:text-slate-300">
                {p.impact.slice(0, MAX_IMPACT).map((i) => <li class="truncate">• {i}</li>)}
                {extraImpact > 0 && <li class="opacity-70">+{extraImpact} more…</li>}
              </ul>
            )}
          </div>

          <div class="mt-3 flex items-center gap-2">
            {p.linkPreview && (
              <a
                href={p.linkPreview}
                target="_blank"
                rel="noopener noreferrer"
                class="text-sm rounded-lg px-3 py-1.5 bg-black/5 dark:bg-white/10 hover:bg-black/10 dark:hover:bg-white/20 transition"
              >
                Live
              </a>
            )}
            {p.linkSource && (
              <a
                href={p.linkSource}
                target="_blank"
                rel="noopener noreferrer"
                class="text-sm rounded-lg px-3 py-1.5 border border-black/10 dark:border-white/10 hover:bg-black/5 dark:hover:bg-white/10 transition"
              >
                Source
              </a>
            )}
          </div>
        </article>
      );
    })}
  </div>
</Section>
